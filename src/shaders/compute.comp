#version 450
#extension GL_ARB_separate_shader_objects : enable

#define WORKGROUP_SIZE 32

#define GRAV_ACCELERATION 5.0
#define WIND_STRENGTH 3.0
#define WIND_FREQ 3.0

#define ORIENTATION_THRESHOLD 0.9
#define NUM_BUCKET 5
#define MAX_DIST 15.0

#define ORIENTATION_CULL 1
#define FRUS_CULL 1
#define DIST_CULL 1

layout(local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform CameraBufferObject {
    mat4 view;
    mat4 proj;
} camera;

layout(set = 1, binding = 0) uniform Time {
    float deltaTime;
    float totalTime;
};

struct Blade {
    vec4 v0;
    vec4 v1;
    vec4 v2;
    vec4 up;
};

// TODO: Add bindings to:
// 1. Store the input blades
// 2. Write out the culled blades
// 3. Write the total number of blades remaining

// The project is using vkCmdDrawIndirect to use a buffer as the arguments for a draw call
// This is sort of an advanced feature so we've showed you what this buffer should look like
//
// layout(set = ???, binding = ???) buffer NumBlades {
// 	  uint vertexCount;   // Write the number of blades remaining here
// 	  uint instanceCount; // = 1
// 	  uint firstVertex;   // = 0
// 	  uint firstInstance; // = 0
// } numBlades;

layout(set = 2, binding = 0) buffer Blades {
    Blade blades[];
};

layout(set = 2, binding = 1) buffer CulledBlades {
    Blade culledBlades[];
};

layout(set = 2, binding = 2) buffer NumBlades {
    uint vertexCount;
    uint instanceCount;
    uint firstVertex;
    uint firstInstance;
} numBlades;

bool inBounds(float value, float bounds) {
    return (value >= -bounds) && (value <= bounds);
}

bool inFrus(vec3 pos) {
    vec4 ccs = camera.proj * camera.view * vec4(pos, 1.0);
    return inBounds(ccs.x, ccs.w) && inBounds(ccs.y, ccs.w) && inBounds(ccs.z, ccs.w);
}

void main() {
	// Reset the number of blades to 0
	if (gl_GlobalInvocationID.x == 0) {
		numBlades.vertexCount = 0;
	}
	barrier(); // Wait till all threads reach this point

    // TODO: Apply forces on every blade and update the vertices in the buffer

	// TODO: Cull blades that are too far away or not in the camera frustum and write them
	// to the culled blades buffer
	// Note: to do this, you will need to use an atomic operation to read and update numBlades.vertexCount
	// You want to write the visible blades to the buffer without write conflicts between threads

    Blade blade = blades[gl_GlobalInvocationID.x];
    vec3 v0 = blade.v0.xyz;
    vec3 v1 = blade.v1.xyz;
    vec3 v2 = blade.v2.xyz;
    vec3 up = blade.up.xyz;
    float orientation = blade.v0.w;
    float height = blade.v1.w;
    float width = blade.v2.w;
    float stiffness = blade.up.w;

    vec4 D = vec4(0.0, -1.0, 0.0, GRAV_ACCELERATION);
    vec3 gE = normalize(D.xyz) * D.w;
    vec3 t1 = normalize(vec3(-cos(orientation), 0.0, sin(orientation)));
    vec3 f = normalize(cross(t1, up));
    vec3 gF = 0.25 * length(gE) * f;
    vec3 g = gE + gF;

    vec3 iv2 = v0 + height * up;
    vec3 re = (iv2 - v2) * stiffness;

    vec3 windDir = WIND_STRENGTH * vec3(cos(WIND_FREQ * v0.x * totalTime), 0.0, sin(WIND_FREQ * v0.z * totalTime));
    float fd = 1.0 - abs(dot(normalize(windDir), normalize(v2 - v0)));
    float fr = dot(v2 - v0, up) / height;
    float theta = fd * fr;
    vec3 w = windDir * theta;

    vec3 tv2 = (g + re + w) * deltaTime;
    v2 += tv2;

    v2 -= up * min(dot(up, v2 - v0), 0);
    float lproj = length(v2 - v0 - up * dot(v2 - v0, up));
    v1 = v0 + height * up * max(1 - lproj / height, 0.05 * max(lproj / height, 1.0));
    float L0 = distance(v0, v2);
    float L1 = distance(v0, v1) + distance(v1, v2);
    float L = (2 * L0 + L1) / 3.0;
    float r = height / L;
    
    v1 = v0 + r * (v1 - v0);
    v2 = v1 + r * (v2 - v1);

    blade.v1.xyz = v1;
    blade.v2.xyz = v2;

    blades[gl_GlobalInvocationID.x] = blade;

    vec3 camPos = inverse(camera.view)[3].xyz;
    vec3 camToBlade = v0 - camPos;
    vec3 viewDir = camToBlade - up * dot(camToBlade, up);

#if ORIENTATION_CULL
    float angle = abs(dot(normalize(viewDir), t1));
    if (angle < ORIENTATION_THRESHOLD) {
        return;
    }
#endif

#if FRUS_CULL
    vec3 m = (1.0 / 4.0) * v0 * (1.0 / 2.0) * v1 * (1.0 / 4.0) * v2;
    if (!inFrus(v0) && !inFrus(v2) && !inFrus(m)) {
        return;
    }
#endif

    float dproj = length(viewDir);
    
#if DIST_CULL
    if ((gl_GlobalInvocationID.x % NUM_BUCKET) < int(floor(NUM_BUCKET * (1.0 - dproj / MAX_DIST)))) {
        return;
    }
#endif

    culledBlades[atomicAdd(numBlades.vertexCount, 1)] = blades[gl_GlobalInvocationID.x];
}
